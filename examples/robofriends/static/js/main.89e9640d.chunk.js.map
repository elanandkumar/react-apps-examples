{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchText","initialStateRobots","isPending","robots","error","Card","_ref","id","email","name","react_default","a","createElement","className","src","concat","alt","CardList","Fragment","map","robot","components_Card","key","username","Scroll","props","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","React","Component","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","toLowerCase","includes","components_SearchBox","src_components_Scroll","components_ErrorBoundry","components_CardList","PureComponent","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.89e9640d.chunk.js","sourcesContent":["import {\n    CHANGE_SEARCH_TEXT,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchText: ''\n};\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_TEXT:\n            return {...state, searchText: action.payload};\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false};\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false};\n        default: \n            return state;\n    }\n}","import React from \"react\";\n\nconst Card = ({ id, email, name }) => {\n\treturn (\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt={name} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <React.Fragment>\n      {robots.map(robot => (\n        <Card\n          id={robot.id}\n          key={robot.id}\n          name={robot.name}\n          email={robot.email}\n          username={robot.username}\n        />\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./Scroll.css\";\n\nconst Scroll = props => {\n  return <div className=\"scroll-container\">{props.children}</div>;\n};\n\nexport default Scroll;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search Robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nclass ErrorBoundry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good!</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React from \"react\";\nimport { connect } from 'react-redux';\nimport CardList from \"../components/CardList\";\nimport Scroll from \"../components/Scroll\";\nimport SearchBox from \"../components/SearchBox\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\nimport { setSearchText, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchText: state.searchRobots.searchText,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: (event) => dispatch(setSearchText(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n});\n\nclass App extends React.PureComponent {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchText, onSearchChange, robots, isPending } = this.props;\n    if (isPending) {\n      return (\n        <div className=\"tc\">\n          <h1>Loading...</h1>\n        </div>\n      );\n    }\n    const filteredRobots = robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchText)\n    );\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    CHANGE_SEARCH_TEXT,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchText = (text) => ({\n    type: CHANGE_SEARCH_TEXT,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n      .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\n}","export const CHANGE_SEARCH_TEXT = 'CHANGE_SEARCH_TEXT';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport App from \"./containers/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({\n    searchRobots,\n    requestRobots\n})\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}